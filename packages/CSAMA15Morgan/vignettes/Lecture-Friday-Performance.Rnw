% \VignetteEngine{knitr::knitr}
% \VignetteIndexEntry{Annotation -- slides}

\documentclass{beamer}
\usepackage{BioconductorSlides}
\title{Performance and Parallel Evaluation}
\author{Martin Morgan
  (\href{mailto:mtmorgan@fredhutch.org}{mtmorgan@fredhutch.org}) \\
  Fred Hutchinson Cancer Research Center \\
  Seattle, WA, USA
}
\date{19 June, 2015}

<<setup, echo=FALSE>>=
options(width=50, max.print=1000, showTailLines=2, showHeadLines=3)
@ 

<<knitr-settings, echo=FALSE>>=
library(knitr)
opts_chunk$set(tidy=FALSE, cache=TRUE)
options(showHeadLines=3, showTailLines=3, width=50)
@
<<settings, echo=FALSE>>=
suppressPackageStartupMessages({
    library(microbenchmark)
    library(BiocParallel)
    library(Rsamtools)
    library(GenomicFiles)
})
@ 

\begin{document}

\maketitle

\begin{frame}{Performance \& Parallel Evaluation}
  \R{} code
  \begin{itemize}
  \item Correct, then efficient
  \end{itemize}
  Parallel evaluation
  \begin{itemize}
  \item Computer
  \item Cluster
  \item Cloud
  \end{itemize}
\end{frame}

\begin{frame}{R code}
  Priorities
  \begin{enumerate}
  \item Correct!
  \item Robust -- works for most realistic inputs
  \item Simple
  \item Fast
  \end{enumerate}
\end{frame}

\begin{frame}[fragile]{R code: deadly sins}
  \begin{enumerate}
  \item Unnecessary iteration
<<unnecessary-iteration>>=
x <- 1:10000; for (i in seq_along(x)) x[i] = log(x[i])
@ 
  \item Copy-and-append iteration
<<copy-and-append>>=
answer <- numeric()
for (i in 1:10000) answer <- c(answer, 1/i)
for (i in 1:10000) answer[i] <- 1/i
@ 
  \item Unneccessary evaluation
<<evaluation>>=
x <- 1:1000000
for (i in seq_along(x)) x[i] = x[i] * sqrt(2)
@     
  \item Re-implementation
  \end{enumerate}
\end{frame}

\begin{frame}[fragile, allowframebreaks]{R code: saving graces}
<<saving-graces>>=
fun1 <- function(n) { 
    ## How many sins?
    x <- numeric()
    for (i in 1:n) 
        x <- c(x, log(i) * sqrt(2))
    x 
}

fun2 <- function(n) 
    log(seq_len(n)) * sqrt(2)
@ 

  \framebreak
  \begin{enumerate}
  \item Validation -- \Rcode{identical()}, \Rcode{all.equal()}
<<valid>>=
identical(fun1(1000), fun2(1000))
@ 
  \item Timing -- \Rcode{system.time()}, \Rpkg{microbenchmark()}
<<timing>>=
library(microbenchmark)
microbenchmark(fun1(1000), fun2(1000))
@ 
  \framebreak
  \item `Experience' -- available packages \& functions
  \item Profiling -- \Rcode{Rprof()}
  \item Foreign languages -- e.g., C, \Rpkg{Rcpp}
  \end{enumerate}
\end{frame}

\begin{frame}{Parallel evaluation}
  \begin{itemize}
  \item Most often: `embarassingly parallel' evaluation of iterative
    \Rcode{for} loops / \Rcode{lapply()}
  \end{itemize}
  Other packages
  \begin{itemize}
  \item \Rpackage{parallel} -- a base package; single computer
  \item \Rpackage{foreach} -- popular `for' loop paradigm
  \item \Rpackage{BatchJobs} -- clusters with job schedulers
  \item \Rpackage{Rmpi} -- classic HPC
  \end{itemize}
  \Biocpkg{BiocParallel}
  \begin{itemize}
  \item Consistent interface
  \item Plays well with many \Bioconductor{} packages
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Parallel evaluation}
<<parallel-fun>>=
library(BiocParallel)
fun <- function(i) {
    Sys.sleep(1)
    i
}
system.time(res1 <- lapply(1:5, fun))
system.time(res2 <- bplapply(1:5, fun))
identical(res1, res2)
@ 
\end{frame}

\begin{frame}{Parallel evaluation: \Biocpkg{BiocParallel}}
    \begin{itemize}
    \item Different \Rcode{*Param()} objects for styles of computing, e.g.,
      \begin{itemize}
      \item \Rcode{SerialParam()}: no parallel evaluation
      \item \Rcode{MulticoreParam()}: separate forked processes on one computer
      \item \Rcode{BatchJobsParam()}: jobs submitted to a cluster queuing system
      \end{itemize}
    \item \Rcode{register()} a param or provide it as an argument for
      use in \Rcode{bplapply()}.
    \item Sensible default values.
    \end{itemize}
\end{frame}

\begin{frame}{Parallel evaluation: processing large genomic files}
  \emph{Restrict} input to minimum necessary data
  \begin{itemize}
  \item Select columns or fields of files to import, e.g.,
    \Rcode{colClasses} argument to \Rcode{read.table()};
    \Rcode{ScanBamParam()} and \Rcode{ScanVcfParam()}.
  \item Use a data base, hdf5, or other file format that allows
    queries or slices of the data to be imported.
  \end{itemize}
  \emph{Iterate} through files to manage memory use
  \begin{itemize}
  \item File connections in base R
  \item \Rcode{BamFile("my.bam", yieldSize=1000000)}
  \end{itemize}
  \Biocpkg{GenomicFiles}
  \begin{itemize}
  \item Functions to help manage collections of genomic files
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Parallel evaluation: extended example}
  Goal: for a vector of paths to bam files, \Rcode{fls}, summarize GC
  content of each aligned read.
<<gc-aligned-reads, eval=FALSE>>=
library(Rsamtools); library(GenomicFiles)
bfls <- BamFileList(fls, yieldSize=100000)
yield <- function(bfl) # input a chunk of alignments
    readGAlignments(bfl, param=ScanBamParam(what="seq"))
map <- function(aln) { # GC content, bin & cummulate
    gc <- letterFrequency(mcols(aln)$seq, "GC", 
        as.prob=TRUE)
    cumsum(tabulate(1 + gc * 50, 51))
}
reduce <- `+`
    
gc <- bplapply(bfls, reduceByYield, yield, map, reduce)
@   
\end{frame}

\begin{frame}{Summary}
  \begin{itemize}
  \item \textbf{Correct} first, performance second
  \item No need to worry about code that doesn't take very long!
  \item `Embarassingly' parallel (\Rcode{lapply()}-like) problems
    easily parallelized, especially on a single computer.
  \item Opportunity for very scalable computations, e.g., via AMI \&
    StarCluster.
  \end{itemize}
\end{frame}

\begin{frame}{Acknowledgments}
  \begin{itemize}
  \item Core (Seattle): Sonali Arora, Marc Carlson, Nate Hayden,
    Valerie Obenchain, Herv\'e Pag\`es, Paul Shannon, Dan Tenenbaum.
  \item The research reported in this presentation was supported by
    the National Cancer Institute and the National Human Genome
    Research Institute of the National Institutes of Health under
    Award numbers U24CA180996 and U41HG004059, and the National
    Science Foundation under Award number 1247813. The content is
    solely the responsibility of the authors and does not necessarily
    represent the official views of the National Institutes of Health
    or the National Science Foundation.
  \end{itemize}
  \medskip\par
  \href{http://bioconductor.org/BioC2015/}{BioC 2015} Annual
  Conference, Seattle, WA, 20-22 July.
\end{frame}

\end{document}

